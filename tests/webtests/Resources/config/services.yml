# This DI configuration file containes overrides on the DashboardBundle configuration,
# typically to replace doctrine repositories with in-memory repositories.
services:

    Surfnet\ServiceProviderDashboard\Application\CommandHandler\Entity\PublishEntityTestCommandHandler:
        class: Surfnet\ServiceProviderDashboard\Webtests\CommandHandler\MockPublishEntityCommandHandler
        public: true
        tags:
            - { name: tactician.handler, command: Surfnet\ServiceProviderDashboard\Application\Command\Entity\PublishEntityCommand }

    surfnet.dashboard.command_handler.publish_production_entity:
        class: Surfnet\ServiceProviderDashboard\Webtests\CommandHandler\MockPublishEntityToProductionCommandHandler
        public: true
        tags:
            - { name: tactician.handler, command: Surfnet\ServiceProviderDashboard\Application\Command\Entity\PublishEntityProductionCommand }

    Surfnet\ServiceProviderDashboard\Webtests\Mailer\FakeMailer:
        arguments: ~

    Surfnet\ServiceProviderDashboard\Infrastructure\DashboardBundle\Mailer\Mailer:
        arguments:
            - '@Surfnet\ServiceProviderDashboard\Webtests\Mailer\FakeMailer'
        public: true

    Surfnet\ServiceProviderDashboard\Legacy\Metadata\Fetcher:
        class: Surfnet\ServiceProviderDashboard\Webtests\Metadata\FakeFetcher

    surfnet.dashboard.session.storage.mock_file:
        class: Surfnet\ServiceProviderDashboard\Webtests\Session\Storage\MockFileSessionStorage
        arguments:
            - '%kernel.cache_dir%/sessions/'
            - 'MOCKSESSID'

    Surfnet\ServiceProviderDashboard\Infrastructure\DashboardBundle\Validator\Constraints\ValidLogoValidator:
        class: Surfnet\ServiceProviderDashboard\Webtests\Validator\Constraints\MockValidLogoValidator
        tags:
            - { name: validator.constraint_validator, alias: logo }

    Surfnet\ServiceProviderDashboard\Infrastructure\Manage\Client\QueryClient:
        class: Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakeQueryClient
        arguments: ['/../../../../var/webtest-test-query-client-manage.json']
        public: true

    surfnet.manage.client.query_client.prod_environment:
        class: Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakeQueryClient
        arguments: ['/../../../../var/webtest-prod-query-client-manage.json']
        public: true

    Surfnet\ServiceProviderDashboard\Infrastructure\Manage\Client\IdentityProviderClient:
        class: Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakeIdentityProviderClient
        public: true

    Surfnet\ServiceProviderDashboard\Infrastructure\Manage\Client\EntityChangeRequestClient:
        class: Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakeEntityChangeRequestClient
        public: true

    surfnet.manage.client.identity_provider_client.test_environment:
        class: Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakeIdentityProviderClient
        public: true

    surfnet.manage.client.publish_client.prod_environment:
        class: Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakePublishEntityClient
        public: true

    Surfnet\ServiceProviderDashboard\Infrastructure\Manage\Client\PublishEntityClient:
        class: Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakePublishEntityClient
        public: true

    surfnet.dashboard.command_handler.create_service:
        class: Surfnet\ServiceProviderDashboard\Application\CommandHandler\Service\CreateServiceCommandHandler
        public: true
        tags:
            - { name: tactician.handler, command: Surfnet\ServiceProviderDashboard\Application\Command\Service\CreateServiceCommand }
        arguments:
            $serviceRepository: '@Surfnet\ServiceProviderDashboard\Infrastructure\DashboardBundle\Repository\ServiceRepository'
            $translator: '@identity_translator'
            $inviteRepository: '@Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakeCreateRoleRepository'
            $landingUrl: '%env(invite_landing_url)%'

    Surfnet\ServiceProviderDashboard\Application\CommandHandler\Service\SendInviteCommandHandler:
        public: true
        autowire: true
        tags:
            - { name: tactician.handler, command: Surfnet\ServiceProviderDashboard\Application\Command\Service\SendInviteCommand }
        arguments:
            $sendInviteRepository: '@Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakeSendInviteRepository'

    Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakeSendInviteRepository:
    Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakeDeleteInviteRepository:
    Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakeCreateRoleRepository:

    Surfnet\ServiceProviderDashboard\Domain\Repository\Invite\CreateRoleRepository:
        class: Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakeCreateRoleRepository
        public: true

    surfnet.manage.client.delete_client.prod_environment:
        class: Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakeDeleteManageEntityClient
        public: true

    surfnet.manage.client.delete_client.test_environment:
        class: Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakeDeleteManageEntityClient
        public: true

    surfnet.dashboard.command_handler.delete_service:
        class: Surfnet\ServiceProviderDashboard\Application\CommandHandler\Service\DeleteServiceCommandHandler
        public: true
        arguments:
            - '@Surfnet\ServiceProviderDashboard\Infrastructure\DashboardBundle\Repository\ServiceRepository'
            - '@Surfnet\ServiceProviderDashboard\Application\Service\EntityService'
            - '@Surfnet\ServiceProviderDashboard\Application\Command\Entity\DeleteCommandFactory'
            - '@tactician.commandbus.default'
            - '@Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakeDeleteInviteRepository'
            - '@logger'
        tags:
            - { name: tactician.handler, command: Surfnet\ServiceProviderDashboard\Application\Command\Service\DeleteServiceCommand }

    Surfnet\ServiceProviderDashboard\Application\Service\TicketService:
        arguments:
            - '@surfnet.dashboard.repository.issue'
            - '@logger'

    surfnet.dashboard.repository.issue:
        class: Surfnet\ServiceProviderDashboard\Infrastructure\Jira\Repository\DevelopmentIssueRepository
        arguments:
            $filePath:  '%kernel.project_dir%/issues.json'
        public: true

    # These services are overloaded for functional tests and have been made public to prevent:
    #
    # > The "logger" service is private, getting it from the container is
    # > deprecated since Symfony 3.2 and will fail in 4.0.
    surfnet_saml.saml2.bridge_container:
        class: Surfnet\SamlBundle\SAML2\BridgeContainer
        public: true
        arguments: ['@logger']

    Surfnet\ServiceProviderDashboard\Domain\Repository\Invite\SendInviteRepository:
        public: true
        class: Surfnet\ServiceProviderDashboard\Webtests\Manage\Client\FakeSendInviteRepository